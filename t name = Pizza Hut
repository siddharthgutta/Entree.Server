[1mdiff --git a/api/controllers/hours.es6 b/api/controllers/hours.es6[m
[1mdeleted file mode 100644[m
[1mindex e0676c4..0000000[m
[1m--- a/api/controllers/hours.es6[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-import * as models from '../../models/mongo/index.es6';[m
[31m-const hour = models.hours;[m
[31m-/**[m
[31m- * Creates a new operating time for a specific restaurant[m
[31m- *[m
[31m- * @param  {String} days: the day of the week to look for[m
[31m- * @param  {String} open: the time the restaurant opens[m
[31m- * @param {String} close: the time the restaurant closes[m
[31m- * @returns {Promise} the hour object created[m
[31m- */[m
[31m-export async function createHours(days, open, close) {[m
[31m-  return await hour.create({[m
[31m-    day: days,[m
[31m-    openTime: open,[m
[31m-    closeTime: close[m
[31m-  });[m
[31m-}[m
[1mdiff --git a/api/controllers/producer.es6 b/api/controllers/producer.es6[m
[1mindex 596b83b..4e34a73 100644[m
[1m--- a/api/controllers/producer.es6[m
[1m+++ b/api/controllers/producer.es6[m
[36m@@ -5,7 +5,7 @@[m
 import * as Producer from '../db/producer.es6';[m
 import * as Merchant from '../controllers/merchant.es6';[m
 import _ from 'lodash';[m
[31m-import * as hours from '../controllers/hours.es6';[m
[32m+[m[32mimport * as Hour from './hour.es6';[m
 [m
 /**[m
  * Find the producer from its object id[m
[36m@@ -82,45 +82,41 @@[m [mexport async function create(name, username, password, description,[m
  * @returns {Promise} returns the producer without updates from the database[m
  */[m
 export async function updateByObjectId(_id, fields) {[m
[31m-  const temp = await Producer.findOneAndUpdate({_id}, {$set: fields}, {runValidators: true});[m
[31m-  return temp;[m
[32m+[m[32m  return await Producer.findOneAndUpdate({_id}, {$set: fields}, {runValidators: true});[m
 }[m
 [m
 /**[m
[31m- *[m
[31m- * @param {String} days: the day to add[m
[32m+[m[32m * Adds hours to the producer object and stores in a subdoc[m
[32m+[m[32m * @param {String} day: the day to add[m
  * @param {String} open: the opening time should be 'hh:mm a'[m
  * @param {String} close: the closing time should be 'hh:mm a'[m
  * @param {String} id: unique identifier to find the restaurant[m
  * @returns {Promise} the result of the update[m
  */[m
[31m-// proudcer.hours.push(hours)[m
[31m-export async function setHours(days, open, close, id) {[m
[31m-  const hour = await hours.createHours(days, open, close);[m
[32m+[m[32mexport async function addHour(day, open, close, id) {[m
[32m+[m[32m  const hour = await Hour.create(day, open, close);[m
   const prod = await findOneByObjectId(id);[m
[31m-  console.log(prod);[m
   prod.hours.push(hour);[m
   return prod.save();[m
 }[m
 [m
 [m
[31m-// add new times delete times[m
 /**[m
[31m- * Deletes the hours for a certain day for a specific restaurant[m
[31m- * @param {String} id: unique identifier to find the restaurant[m
[31m- * @param {String} day: day of the week to delete[m
[31m- * @param {String} open: the opening time for that restaurant[m
[31m- * @param {String} close: the closing time for the restaurant[m
[32m+[m[32m * Deletes the hours for a certain day for a specific producer[m
[32m+[m[32m * @param {String} id: unique identifier to find the producer[m
[32m+[m[32m * @param {String} day: day of the week to producer[m
[32m+[m[32m * @param {String} open: the opening time for that producer[m
[32m+[m[32m * @param {String} close: the closing time for the producer[m
  * @returns {Promise} removed object[m
  */[m
[31m-export async function deleteHours(id, day, open, close) {[m
[32m+[m[32mexport async function deleteHour(id, day, open, close) {[m
   const prod = await Producer.findOne(id);[m
[31m-  for (let k = 0; k < prod.hours.length; k++) {[m
[31m-    if (prod.hours[k].day === day && prod.hours[k].openTime === open && prod.hours[k].closeTime === close) {[m
[31m-      prod.hours[k].remove();[m
[32m+[m[32m  _.forEach(prod.hours,  function(key) {[m
[32m+[m[32m    if (key.day === day && key.openTime === open && key.closeTime === close) {[m
[32m+[m[32m      key.remove();[m
       break;[m
     }[m
[31m-  }[m
[32m+[m[32m  });[m
   prod.save(err => {[m
     if (err) return err;[m
   });[m
[36m@@ -128,9 +124,9 @@[m [mexport async function deleteHours(id, day, open, close) {[m
 }[m
 [m
 /**[m
[31m- * Updates the operating times for a single day for a specific restaurant[m
[32m+[m[32m * Updates the operating times for a single day for a specific producer[m
  *[m
[31m- * @param {String} id:unique identifier to find the restaurant[m
[32m+[m[32m * @param {String} id:unique identifier to find the producer[m
  * @param {String} day: the day of the week to update[m
  * @param {String} oldOpen: the old open time formatted 'HH:mm'[m
  * @param {String} oldClose: the old close time formatted 'HH:mm'[m
[36m@@ -139,13 +135,13 @@[m [mexport async function deleteHours(id, day, open, close) {[m
  * @returns {Promise} modified hours object[m
  */[m
 export async function updateHours(id, day, oldOpen, oldClose, newOpen, newClose) {[m
[31m-  await deleteHours(id, day, oldOpen, oldClose);[m
[31m-  return await setHours(day, newOpen, newClose, id);[m
[32m+[m[32m  await deleteHour(id, day, oldOpen, oldClose);[m
[32m+[m[32m  return await addHour(day, newOpen, newClose, id);[m
 }[m
 /**[m
[31m- * Gets the hours for a specific restaurant[m
[32m+[m[32m * Gets the hours for a specific producer[m
  *[m
[31m- * @param {number} id: finds the restaurant[m
[32m+[m[32m * @param {number} id: finds the producer[m
  * @returns {Promise} the array of hour objects of the restaurant's hours[m
  */[m
 export async function getHours(id) {[m
[1mdiff --git a/test/api/controller/hours-test.es6 b/test/api/controller/hours-test.es6[m
[1mindex 9ac4d44..a03a13a 100644[m
[1m--- a/test/api/controller/hours-test.es6[m
[1m+++ b/test/api/controller/hours-test.es6[m
[36m@@ -1,4 +1,4 @@[m
[31m-import * as hours from '../../../api/controllers/hours.es6';[m
[32m+[m[32mimport * as hours from '../../../api/controllers/hour.es6';[m
 import {clear} from '../../../models/mongo/index.es6';[m
 import assert from 'assert';[m
 const hour = hours;[m
[1mdiff --git a/test/api/controllers/producer-test.es6 b/test/api/controllers/producer-test.es6[m
[1mindex 8676d8c..65b7a99 100644[m
[1m--- a/test/api/controllers/producer-test.es6[m
[1m+++ b/test/api/controllers/producer-test.es6[m
[36m@@ -283,7 +283,7 @@[m [mdescribe('Producer DB API', () => {[m
       const day = 'Monday';[m
       const open = '10:30';[m
       const close = '22:30';[m
[31m-      await Producer.setHours(day, open, close, _id);[m
[32m+[m[32m      await Producer.addHour(day, open, close, _id);[m
       const producer = await Producer.findOneByObjectId(_id);[m
       assert.equal(producer.hours[producer.hours.length - 1].day, day);[m
       assert.equal(producer.hours[producer.hours.length - 1].openTime, open);[m
[36m@@ -299,7 +299,7 @@[m [mdescribe('Producer DB API', () => {[m
         merchant: {[m
           merchantId: '987654'[m
         }});[m
[31m-      await Producer.setHours('Wednesday', fields.hour.openTime, fields.hour.closeTime, _id);[m
[32m+[m[32m      await Producer.addHour('Wednesday', fields.hour.openTime, fields.hour.closeTime, _id);[m
       const check = await Producer.getHours(_id);[m
       assert.equal(check[check.length - 1].day, hours.day);[m
     });[m
[36m@@ -316,9 +316,9 @@[m [mdescribe('Producer DB API', () => {[m
         merchant: {[m
           merchantId: '987655'[m
         }});[m
[31m-      let temp = await Producer.setHours(hours.day, hours.openTime, hours.closeTime, _id);[m
[32m+[m[32m      let temp = await Producer.addHour(hours.day, hours.openTime, hours.closeTime, _id);[m
       const check = temp.hours.length - 1;[m
[31m-      temp = await Producer.deleteHours(_id, hours.day, hours.openTime, hours.closeTime);[m
[32m+[m[32m      temp = await Producer.deleteHour(_id, hours.day, hours.openTime, hours.closeTime);[m
       assert.equal(check, temp.hours.length);[m
     });[m
 [m
[36m@@ -334,7 +334,7 @@[m [mdescribe('Producer DB API', () => {[m
         merchant: {[m
           merchantID: '987666'[m
         }});[m
[31m-      await Producer.setHours(hours.day, hours.openTime, hours.closeTime, _id);[m
[32m+[m[32m      await Producer.addHour(hours.day, hours.openTime, hours.closeTime, _id);[m
       const temp = await Producer.updateHours(_id, hours.day, hours.openTime,[m
         hours.closeTime, hours.newOpen, hours.newClose);[m
       assert.equal(hours.newOpen, temp.hours[temp.hours.length - 1].openTime);[m
